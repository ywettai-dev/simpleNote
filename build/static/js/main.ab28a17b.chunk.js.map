{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oOAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCR1CK,EAAU,qDAuBD,EArBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAmB9B,EAhBA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVvCK,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKd,UAAU,SACZc,IAKDC,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGA6GWC,EAxGL,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAmBhBC,qBAba,WAMXC,IAECzB,MAAK,SAAA0B,GACJT,EAASS,QAIG,IAEhB,IA2BMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAwB9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAce,QAASc,IACvB,6BACE,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAAvC,GAAI,OACnB,kBAAC,EAAD,CACEwC,IAAKxC,EAAKe,GACVf,KAAMA,EACNC,iBAAkB,kBApCD,SAACc,GAE1B,IAAMf,EAAO0B,EAAMe,MAAK,SAAAzC,GAAI,OAAIA,EAAKe,KAAOA,KACtC2B,EAAW,2BAAQhB,GAAR,IAAevB,WAAYH,EAAKG,YAKjDgC,EACQpB,EAAI2B,GACXhC,MAAK,SAAAiC,GACJhB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO2C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,aAAD,OAAcjC,EAAKK,QAAnB,sCACfyC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKe,KAAOA,SAkBZgC,CAAmB/C,EAAKe,WAItD,0BAAMiC,SAvEM,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAa,CACjB9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAU7BrB,EACQgB,GACPzC,MAAK,SAAAiC,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,SAqDP,2BACE6B,MAAO9B,EACP+B,SAnDe,SAACV,GACxBpB,EAAWoB,EAAEW,OAAOF,UAoDd,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,QC7HNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.ab28a17b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important';\n\n    return(\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note;","import axios from 'axios';\nconst baseUrl = 'https://simplenotewithnode.herokuapp.com/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\n/*export default {\n    getAll: getAll,\n    create: create,\n    update: update\n}*/\n// since the names of the assigned variables and keys are the same\nexport default { getAll, create, update };","import React,{ useState, useEffect} from 'react';\nimport Note from './components/Note';\n// import axios from 'axios';\nimport noteService from './services/notes';\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    /*axios\n    .get('http://localhost:3002/notes')\n    .then(response => {\n      setNotes(response.data);\n    })*/\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes);\n    })\n  }\n\n  useEffect(hook, []);\n\n  const addNote = (e) => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1,\n    };\n    \n    /*axios\n    .post('http://localhost:3002/notes', noteObject)\n    .then(response => {\n      setNotes(notes.concat(response.data));\n      setNewNote('');\n    })*/\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    })\n  }\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  const toggleImportanceOf = (id) => {\n    // const url = `http://localhost:3002/notes/${id}`;\n    const note = notes.find(note => note.id === id);\n    const changedNote = { ...notes, important: !note.important};\n\n    /*axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n    })*/\n    noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    })\n    .catch(error => {\n      setErrorMessage(`the note '${note.content}' was already deleted from server`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(note => note.id !== id));\n    })\n  }\n\n  return(\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n          <input \n            value={newNote}\n            onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n  }\n\n  export default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}